package regulator;

// PI class to be written by you
public class PI {
	// Current PI parameters
	private PIParameters p;

	private double I;

	// Constructor
	public PI(String name) {
		p = new PIParameters();

		p.Beta = 0.5;
		p.h = 0.05;
		p.K = 2.6133;
		p.Ti = 0.4523;

		this.I = 0.0;
	}

	// Calculates the control signal v.
	// Called from BeamRegul.
	public synchronized double calculateOutput(double y) {
		return p.Beta * p.K - p.K * y + I;
	}

	// Updates the controller state.
	// Should use tracking-based anti-windup
	// Called from BeamRegul.
	public synchronized void updateState(double r, double y) {
		I = I + (p.K * p.h) / p.Ti * (r - y);

	}

	// Returns the sampling interval expressed as a long.
	// Note: Explicit type casting needed
	public synchronized long getHMillis() {
		return (long) (p.h * 1000.0);
	}

}
