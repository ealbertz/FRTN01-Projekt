package communication;

import java.io.*;

public class ProcessInput implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private double vel;
	private double pos;

	public ProcessInput(double vel, double pos) {

		this.vel = vel;
		this.pos = pos;

	}

	public ProcessInput(byte[] inputBytes) {
		ByteArrayInputStream bis = new ByteArrayInputStream(inputBytes);
		ObjectInput in = null;

		try {
			in = new ObjectInputStream(bis);
			Object o = in.readObject();

		} catch (Exception e) {
			System.out.println("Could not convert from bytes");
		} finally {

			try {
				bis.close();
			} catch (IOException e) {
				// ignorerar close exception
			}
			try {
				if (in != null) {
					in.close();
				}
			} catch (IOException e) {

			}
		}
		o.get

	}

	public double getVel() {
		return vel;
	}

	public double getPos() {
		return pos;
	}

	public byte[] getBytes() {
return SerializationUtils.serialize(this);
		
//		ByteArrayOutputStream bos = new ByteArrayOutputStream();
//		ObjectOutput out = null;
//		byte[] returnBytes = null;
//
//		try {
//			out = new ObjectOutputStream(bos);
//			out.writeObject(this);
//			returnBytes = bos.toByteArray();
//		} catch (IOException e) {
//			System.out.println("Could not convert to bytes");
//			e.printStackTrace();
//		} finally {
//
//			try {
//				if (out != null) {
//					out.close();
//				}
//			} catch (IOException e) {
//				// ignorera close exception
//			}
//			try {
//				bos.close();
//			} catch (IOException e) {
//				// ignorera close exception
//			}
//		}
//
//		return returnBytes;
	}

}
